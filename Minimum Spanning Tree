//{ Driver Code Starts
#include<bits/stdc++.h>
using namespace std;

// } Driver Code Ends
class Solution
{
	public:
	// by kruskal algorithm
	int findparent(int u,vector<int>&parent){
	    if(u==parent[u])
	    return u;
	    return parent[u]=findparent(parent[u],parent);
	}
	void unionbyrank(int u,int v, vector<int>&parent, vector<int>&rank){
	    int pu=findparent(u,parent);
	    int pv=findparent(v,parent);
	    if(rank[pu]>rank[pv]){
	        parent[pv]=pu;
	    }
	    else if(rank[pu]<rank[pv]){
	        parent[pu]=pv;
	    }
	    else{
	        parent[pv]=pu;
	        rank[pu]++;
	    }
	}
	//Function to find sum of weights of edges of the Minimum Spanning Tree.
    int spanningTree(int V, vector<vector<int>> adj[])
    {
        // code here
        vector<int>parent(V);
        vector<int>rank(V,0);
        for(int i=0;i<V;i++)
            parent[i]=i;
        
        priority_queue<pair<int,pair<int,int>> , vector<pair<int,pair<int,int>>> , greater<pair<int,pair<int,int>>>>pq;
        for(int i=0;i<V;i++){
            for(int j=0;j<adj[i].size();j++){
                pq.push({adj[i][j][1],{i,adj[i][j][0]}});
            }
        }      
        int cost=0;
        int edges=0;
        while(!pq.empty()){
            int wt=pq.top().first;
            int u=pq.top().second.first;
            int v=pq.top().second.second;
            pq.pop();
            
            if(findparent(u,parent)!=findparent(v,parent)){
                cost+=wt;
                unionbyrank(u,v,parent,rank);
            }
        }
        return cost;
}
};
